service: sixtransaction
package:
  exclude:
    - .git/**
    
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  stage: ${opt:stage, 'development'}
  region: us-east-1
  profile: six
  environment:
    dynamo_table: access_keys
    

site_config: ${file(./config/${opt:stage}/site.yml)}

functions:
  verifysignature:
    handler: authorizers/verifysignature/handler.verifysignature
    environment:
      dynamodb_table: ${file(./config/${opt:stage}/site.yml):dynamodb.table}
  verifyjwt:
    handler: authorizers/verifyjwt/handler.verifyjwt
    environment:
      site_secret_jwt_key: ${file(./config/${opt:stage}/site.yml):site_secret_jwt_key}
  acquiretoken:
    handler: endpoints/acquiretoken/handler.acquiretoken
    events:
      - http:
         path: token/acquire
         method: get
         cors: true
         authorizer:
            name: verifysignature
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
    environment:
      site_secret_jwt_key: ${file(./config/${opt:stage}/site.yml):site_secret_jwt_key}
  createorder:
    handler: endpoints/createorder/handler.createorder
    events:
      - http:
         path: order/create
         method: post
         cors: true
         authorizer:
           name: verifyjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization
    environment:
        nmi_username: 'demo'
        nmi_password: 'password'
        nmi_endpoint: 'https://secure.networkmerchants.com/api/transact.php'
  confirmorder:
    handler: endpoints/confirmorder/handler.confirmorder
    events:
      - http:
         path: order/confirm
         method: get
         cors: true
         authorizer:
           name: verifyjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization
resources:  
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: access_keys
        AttributeDefinitions:
          - AttributeName: access_key
            AttributeType: S
        KeySchema:
          - AttributeName: access_key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
           - Effect: Allow
             Action:
               - dynamodb:GetItem
               - dynamodb:PutItem
             Resource: arn:aws:dynamodb:*:*:table/access_keys
        Roles:
          - Ref: IamRoleLambdaExecution