service: sixcrm
package:
  excludeDevDependencies: true
  exclude:
    - .git/**
    - bin/**
    - coverage/**
    - deployment/**
    - test/**
    - tools/**
  include:
    - serverless.yml

provider:
  name: aws
  vpc:
    securityGroupIds:
      - ${self:provider.environment.vpc_security_group}
    subnetIds:
      - ${self:provider.environment.vpc_subnet1}
      - ${self:provider.environment.vpc_subnet2}
      - ${self:provider.environment.vpc_subnet3}
  runtime: nodejs8.10
  timeout: 90
  stage: ${opt:stage, 'development'} #Technical Debt:  Eliminate
  region: ${file(./config/${opt:stage}/site.yml):aws.region} #Technical Debt:  Eliminate
  account: ${file(./config/${opt:stage}/site.yml):aws.account} #Technical Debt:  Eliminate
  role: arn:aws:iam::${self:provider.account}:role/sixcrm_lambda_role
  tracing: true #Technical Debt:  Eliminate
  deploymentBucket:
    serverSideEncryption: AES256
  environment:
    stage: ${opt:stage, self:provider.stage} #Technical Debt:  Eliminate
    aws_region: ${opt:region, self:provider.region} #Technical Debt:  Eliminate
    aws_account: ${self:provider.account} #Technical Debt:  Eliminate
    SIX_VERBOSE: ${file(./config/${opt:stage}/site.yml):serverless.verbose}
    cloudsearch_domainendpoint: ${file(./config/controllers/configuration_acquisition.js):getCloudsearchSearchEndpoint}
    aurora_host: ${file(./config/controllers/configuration_acquisition.js):getAuroraClusterEndpoint}
    elasticsearch_endpoint: ${file(./config/controllers/configuration_acquisition.js):getElasticSearchEndpoint}
    elasticache_endpoint: ${file(./config/controllers/configuration_acquisition.js):getElastiCacheEndpoint}
    vpc_subnet1: ${file(./config/controllers/configuration_acquisition.js):getSubnet1}
    vpc_subnet2: ${file(./config/controllers/configuration_acquisition.js):getSubnet2}
    vpc_subnet3: ${file(./config/controllers/configuration_acquisition.js):getSubnet3}
    vpc_security_group: ${file(./config/controllers/configuration_acquisition.js):getSecurityGroup}

plugins:
  - serverless-dynamodb-local
  - serverless-prune-plugin
  - serverless-plugin-warmup

custom:
  prune:
    automatic: true
    number: 3
  warmup:
    prewarm: true


functions:

########################
# Authorizers qualify requests passing through API Gateway
########################

  verifysignature:
    handler: handlers/authorizers/handlers.verifysignature
    warmup: true

  verifytransactionjwt:
    handler: handlers/authorizers/handlers.verifytransactionjwt
    warmup: true

  verifysitejwt:
    handler: handlers/authorizers/handlers.verifysitejwt
    warmup: true

  verifycustomerjwt:
    handler: handlers/authorizers/handlers.verifycustomerjwt
    warmup: true

########################
# Graph Endpoint
########################

  customergraph:
    handler: handlers/endpoints/handlers.customergraph
    warmup: true
    events:
      - http:
          path: customergraph/{account}
          method: post
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: verifycustomerjwt
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  graph:
    handler: handlers/endpoints/handlers.graph
    warmup: true
    events:
      - http:
          path: graph/{account}
          method: post
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: verifysitejwt
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  publicgraph:
    handler: handlers/endpoints/handlers.publicgraph
    warmup: true
    events:
      - http:
          path: publicgraph/
          method: post
          cors:
            origin: '*'
            maxAge: 86400


########################
# State Machine Lambdas
########################

#All
  report:
    handler: handlers/statemachine/handlers.report

#Create Rebill
  getsessionstatus:
    handler: handlers/statemachine/handlers.getsessionstatus
  createrebill:
    handler: handlers/statemachine/handlers.createrebill
  concludesession:
    handler: handlers/statemachine/handlers.concludesession

#Close Session
  getsessionclosed:
    handler: handlers/statemachine/handlers.getsessionclosed
  closesession:
    handler: handlers/statemachine/handlers.closesession
  cleanupsession:
    handler: handlers/statemachine/handlers.cleanupsession
  triggercreaterebill:
    handler: handlers/statemachine/handlers.triggercreaterebill
  getsessionrebill:
    handler: handlers/statemachine/handlers.getsessionrebill

# Carrier
  gettrackinginformation:
    handler: handlers/statemachine/handlers.gettrackinginformation
  senddeliverynotification:
    handler: handlers/statemachine/handlers.senddeliverynotification

# Post fulfillment
  gettrackingnumber:
    handler: handlers/statemachine/handlers.gettrackingnumber
  triggertracking:
    handler: handlers/statemachine/handlers.triggertracking

# Fulfillment
  notifyfulfillmentproviders:
    handler: handlers/statemachine/handlers.notifyfulfillmentproviders
  triggerpostfulfillment:
    handler: handlers/statemachine/handlers.triggerpostfulfillment

  # Pre-Fulfillment
  getfulfillmentrequired:
    handler: handlers/statemachine/handlers.getfulfillmentrequired
  triggerfulfillment:
    handler: handlers/statemachine/handlers.triggerfulfillment

  #Bill #Recover
  bill:
    handler: handlers/statemachine/handlers.bill
  triggerprefulfillment:
    handler: handlers/statemachine/handlers.triggerprefulfillment
  cleanupdecline:
    handler: handlers/statemachine/handlers.cleanupdecline

  #Bill
  triggerrecovery:
    handler: handlers/statemachine/handlers.triggerrecovery

  #Recover
  getrecoverdate:
    handler: handlers/statemachine/handlers.getrecoverdate

########################
# SQS handlers
########################

  indextoarchive:
    handler: handlers/workers/forwardmessage/handlers.indextoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      archivefilter: 'all'

########################
# SNS Workers
########################

  customeremail:
    handler: handlers/workers/sns/handlers.customeremail

  trackingevents:
    handler: handlers/workers/sns/handlers.trackingevents

  notificationevents:
    handler: handlers/workers/sns/handlers.notificationevents

#  eventhooks:
#    handler: handlers/workers/eventhooks/handler.eventhooks

########################
# Event Workers
########################

#  selectrebills:
#    handler: handlers/workers/handlers.selectrebills
#    events:
#      - schedule:
#          rate: rate(10 minutes)
#          enabled: true

  analyticseventhandler:
    handler: handlers/workers/handlers.analyticseventhandler
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

#  reindex:
#    handler: handlers/workers/handlers.reindex
#    events:
#      - schedule:
#          rate: rate(60 minutes)
#          enabled: true

########################
# Transaction Endpoints  (initial customer entrypoint)
########################

  acquiretoken:
    handler: handlers/endpoints/handlers.acquiretoken
    warmup: true
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: token/acquire/{account}
         method: post
         cors: true
         authorizer:
            name: verifysignature
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  createlead:
    handler: handlers/endpoints/handlers.createlead
    warmup: true
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: lead/create/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  createorder:
    handler: handlers/endpoints/handlers.createorder
    warmup: true
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: order/create/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  confirmorder:
    handler: handlers/endpoints/handlers.confirmorder
    warmup: true
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: order/confirm/{account}
         method: get
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  info:
    handler: handlers/endpoints/handlers.info
    warmup: true
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: info/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  tracking:
    handler: handlers/endpoints/handlers.tracking
    warmup: true
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: tracking/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  checkout:
    handler: handlers/endpoints/handlers.checkout
    warmup: true
    timeout: 29
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: checkout/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

########################
# Utility
########################

  logger:
    handler: handlers/handlers.logger
