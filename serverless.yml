service: sixtransaction
package:
  exclude:
    - .git/**
    
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  stage: ${opt:stage, 'development'}
  region: us-east-1
  profile: six
    
plugins:
  - serverless-dynamodb-local
  
custom:
  dynamodb:
    start:
      port: 8001
      inMemory: true
      migration: true
    migration:
      dir: ./dynamolocal/migrations
      
site_config: ${file(./config/${opt:stage}/site.yml)}

functions:
  verifysignature:
    handler: authorizers/verifysignature/handler.verifysignature
    environment:
      access_keys_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.access_keys_table}
      stage: ${opt:stage}
      
  verifyjwt:
    handler: authorizers/verifyjwt/handler.verifyjwt
    environment:
      secret_key: ${file(./config/${opt:stage}/site.yml):jwt.transaction_key}
      stage: ${opt:stage}
      development_bypass: ${file(./config/${opt:stage}/site.yml):jwt.development_bypass}
      
  verifyauth0jwt:
    handler: authorizers/verifyjwt/handler.verifyjwt
    environment:
      secret_key: ${file(./config/${opt:stage}/site.yml):jwt.site_key}
      stage: ${opt:stage}
      development_bypass: ${file(./config/${opt:stage}/site.yml):jwt.development_bypass}
      
  graph:
    handler: endpoints/graph/handler.graph
    events:
      - http:
          path: graph/
          method: post
          cors: true
          authorizer:
            name: verifyauth0jwt
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
    environment:
      stage: ${opt:stage}   
      sessions_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.sessions_table}
      
  acquiretoken:
    handler: endpoints/acquiretoken/handler.acquiretoken
    events:
      - http:
         path: token/acquire
         method: get
         cors: true
         authorizer:
            name: verifysignature
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
    environment:
      site_secret_jwt_key: ${file(./config/${opt:stage}/site.yml):jwt.transaction_key}
      stage: ${opt:stage}
      
  createlead:
    handler: endpoints/createlead/handler.createlead
    events:
      - http:
         path: lead/create
         method: post
         cors: true
         authorizer:
           name: verifyjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization
    environment:
        dynamo_endpoint: ${file(./config/${opt:stage}/site.yml):dynamodb.endpoint}
        customers_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.customers_table}
        sessions_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.sessions_table}
        stage: ${opt:stage}
        
  createorder:
    handler: endpoints/createorder/handler.createorder
    events:
      - http:
         path: order/create
         method: post
         cors: true
         authorizer:
           name: verifyjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization
    environment:
        dynamo_endpoint: ${file(./config/${opt:stage}/site.yml):dynamodb.endpoint}
        customers_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.customers_table}
        sessions_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.sessions_table}
        products_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.products_table}
        creditcards_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.creditcards_table}
        transactions_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.transactions_table}
        nmi_username: ${file(./config/${opt:stage}/site.yml):nmi.username}
        nmi_password: ${file(./config/${opt:stage}/site.yml):nmi.password}
        nmi_endpoint: ${file(./config/${opt:stage}/site.yml):nmi.endpoint}
        stage: ${opt:stage}
        
  confirmorder:
    handler: endpoints/confirmorder/handler.confirmorder
    events:
      - http:
         path: order/confirm
         method: get
         cors: true
         authorizer:
           name: verifyjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization
    environment:
        dynamo_endpoint: ${file(./config/${opt:stage}/site.yml):dynamodb.endpoint}
        sessions_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.sessions_table}
        products_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.products_table}
        transactions_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.transactions_table}
        customers_table: ${opt:stage}${file(./config/${opt:stage}/site.yml):dynamodb.customers_table}
        stage: ${opt:stage}
resources:  
  Resources:
    accesskeys:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${opt:stage}access_keys
        AttributeDefinitions:
          - AttributeName: access_key
            AttributeType: S
        KeySchema:
          - AttributeName: access_key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    customerstable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${opt:stage}customers
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema: 
              - AttributeName: email
                KeyType: "HASH"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    sessionstable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${opt:stage}sessions
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: customer
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: customer-index
            KeySchema: 
              - AttributeName: customer
                KeyType: "HASH"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    transactionstable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${opt:stage}transactions
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: parentsession
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: parentsession-index
            KeySchema: 
              - AttributeName: parentsession
                KeyType: "HASH"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    creditcardsstable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${opt:stage}creditcards
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: ccnumber
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ccnumber-index
            KeySchema: 
              - AttributeName: ccnumber
                KeyType: "HASH"
            Projection: 
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    productstable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${opt:stage}products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: accesskeys
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
           - Effect: Allow
             Action:
               - dynamodb:*
             Resource: arn:aws:dynamodb:*:*:table/*
        Roles:
          - Ref: IamRoleLambdaExecution