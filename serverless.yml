service: sixcrm
package:
  excludeDevDependencies: true
  exclude:
    - .git/**
    - bin/**
    - coverage/**
    - model/dynamodb/**
    - model/redshift/seeds/**
    - deployment/**
    - test/**
    - tools/**
  include:
    - serverless.yml

# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  timeout: 90
  stage: ${opt:stage, 'development'}
  region: ${file(./config/${opt:stage}/site.yml):aws.region}
  profile: six
  environment:
    stage: ${opt:stage, self:provider.stage}
    aws_region: ${opt:region, self:provider.region}
    aws_account: ${file(./config/${opt:stage}/site.yml):aws.account}
    dynamo_endpoint: ${file(./config/${opt:stage}/site.yml):dynamodb.endpoint}
    search_indexing_queue: 'search_indexing'
    #Technical Debt:  update to "send_notifications"
    send_notifications_queue: 'send_notification'
    rebill_queue: 'rebill'
    bill_queue: 'bill'
    hold_queue: 'hold'
    bill_failed_queue: 'bill_failed'
    redshift_random_data_interval: ${file(./config/${opt:stage}/site.yml):redshift.randomdata.interval}

plugins:
  - serverless-dynamodb-local
  - serverless-prune-plugin

custom:
  dynamodb:
    start:
      port: 8001
      inMemory: true
      migration: true
    migration:
      dir: ./model/dynamodb/tables
    seed:
      dir: ./model/dynamodb/seeds

#is this necessary here?
site_config: ${file(./config/${opt:stage}/site.yml)}

functions:

########################
# Authorizers qualify requests passing through API Gateway
########################

  verifysignature:
    handler: handlers/authorizers/verifysignature/handler.verifysignature

  verifytransactionjwt:
    handler: handlers/authorizers/verifytransactionjwt/handler.verifyjwt
    environment:
      transaction_jwt_secret_key: ${file(./config/${opt:stage}/site.yml):jwt.transaction.secret_key}
      transaction_jwt_expiration: ${file(./config/${opt:stage}/site.yml):jwt.transaction.expiration}
      jwt_issuer: ${file(./config/${opt:stage}/site.yml):jwt.issuer}

  verifysitejwt:
    handler: handlers/authorizers/verifysitejwt/handler.verifyjwt
    environment:
      site_jwt_secret_key: ${file(./config/${opt:stage}/site.yml):jwt.site.secret_key}
      site_jwt_expiration: ${file(./config/${opt:stage}/site.yml):jwt.site.expiration}
      jwt_issuer: ${file(./config/${opt:stage}/site.yml):jwt.issuer}

########################
# Backend Graph Endpoint renders entity data to the website
########################

  graph:
    handler: handlers/endpoints/graph/handler.graph
    events:
      - http:
          path: graph/{account}
          method: post
          cors: true
          authorizer:
            name: verifysitejwt
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
    environment:
      usecache: ${file(./config/${opt:stage}/site.yml):cache.usecache}
      cachebuster: ${file(./config/${opt:stage}/site.yml):cache.cachebuster}
      logging: ${file(./config/${opt:stage}/site.yml):logging.loglevel}


########################
# State Machine Lambdas
########################

# Relays (forwardmessage)

  billtohold:
    handler: handlers/workers/forwardmessage/billtohold/handler.billtohold
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

  recovertohold:
    handler: handlers/workers/forwardmessage/recovertohold/handler.recovertohold
    events:
      - schedule:
          rate: cron(0 1 ? * FRI *)
          enabled: true

  holdtopending:
    handler: handlers/workers/forwardmessage/holdtopending/handler.holdtopending
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

  pendingfailedtopending:
    handler: handlers/workers/forwardmessage/pendingfailedtopending/handler.pendingfailedtopending
    events:
      - schedule:
          rate: rate(6 hours)
          enabled: true

  pendingtoshipped:
    handler: handlers/workers/forwardmessage/pendingtoshipped/handler.pendingtoshipped
    events:
      - schedule:
        rate: rate(1 minute)
        enabled: true

  shippedtodelivered:
    handler: handlers/workers/forwardmessage/shippedtodelivered/handler.shippedtodelivered
    events:
      - schedule:
        rate: rate(1 minute)
        enabled: true

  deliveredtoarchive:
    handler: handlers/workers/forwardmessage/deliveredtoarchive/handler.deliveredtoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      archivefilter: 'all'

  holdtoarchive:
    handler: handlers/workers/forwardmessage/holdtoarchive/handler.holdtoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      archivefilter: 'noship'

  rebilltoarchive:
    handler: handlers/workers/forwardmessage/rebilltoarchive/handler.rebilltoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      archivefilter: 'all'

  recovertoarchive:
    handler: handlers/workers/forwardmessage/recovertoarchive/handler.recovertoarchive
    events:
      - schedule:
          rate: rate(6 hours)
          enabled: true
    environment:
      archivefilter: 'twoattempts'

  indextoarchive:
    handler: handlers/workers/forwardmessage/indextoarchive/handler.indextoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      archivefilter: 'all'

  sendnotificationstoarchive:
    handler: handlers/workers/forwardmessage/sendnotificationstoarchive/handler.sendnotificationstoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: false
    environment:
      archivefilter: 'all'

  pickrebillstobill:
    handler: handlers/workers/forwardmessage/pickrebillstobill/handler.pickrebillstobill
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true

# Workers
#These do not use the forwardMessage controller because thier datasources are not SQS
  randomredshiftdata:
    handler: handlers/workers/randomredshiftdata/handler.randomredshiftdata
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true

#execute on fifth minute of every hour
  rebillstatetoredshift:
    handler: handlers/workers/rebillstatetoredshift/handler.rebillstatetoredshift
    events:
      - schedule:
          rate: cron(5 * * * ? *)
          enabled: true

  #sesnotifications:
  #  handler: handlers/workers/sesnotifications/handler.sesnotifications
  #  events:
  #    - sns:
  #        topicName: SESNotifications
  #        displayName: SES Notifications

  #Technical Debt:  This seems broken
  #slackalarm:
  #  handler: handlers/workers/slackalarm/exports.handler
  #  events:
  #    - sns:
  #        topicName: SlackAlarm
  #        displayName: Slack Alarm
  #  environment:
  #    slackChannel: ${file(./config/${opt:stage}/site.yml):slack.channel}
  #    kmsEncryptedHookUrl: ${file(./config/${opt:stage}/site.yml):slack.kms_encrypted_hook_url}


########################
# Transaction Endpoints  (initial customer entrypoint)
########################

  acquiretoken:
    handler: handlers/endpoints/acquiretoken/handler.acquiretoken
    events:
      - http:
         path: token/acquire/{account}
         method: post
         cors: true
         authorizer:
            name: verifysignature
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
    environment:
      jwt_issuer: ${file(./config/${opt:stage}/site.yml):jwt.issuer}
      transaction_jwt_expiration: ${file(./config/${opt:stage}/site.yml):jwt.transaction.expiration}
      transaction_jwt_secret_key: ${file(./config/${opt:stage}/site.yml):jwt.transaction.secret_key}

  createlead:
    handler: handlers/endpoints/createlead/handler.createlead
    events:
      - http:
         path: lead/create/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  createorder:
    handler: handlers/endpoints/createorder/handler.createorder
    events:
      - http:
         path: order/create/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  confirmorder:
    handler: handlers/endpoints/confirmorder/handler.confirmorder
    events:
      - http:
         path: order/confirm/{account}
         method: get
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  tracking:
    handler: handlers/endpoints/tracking/handler.tracking
    events:
      - http:
         path: tracking/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  checkout:
    handler: handlers/endpoints/checkout/handler.checkout
    events:
      - http:
         path: checkout/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

########################
# Resource definitions for required system resources
########################
#Technical Debt:  Move this to the deployment directory

resources:
  Resources:
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
           - Effect: Allow
             Action:
               - dynamodb:*
             Resource: arn:aws:dynamodb:*:*:table/*
           - Effect: Allow
             Action:
               - sqs:*
             Resource: arn:aws:sqs:*:*:*
           - Effect: Allow
             Action:
               - lambda:*
             Resource: arn:aws:lambda:us-east-1:*:*:*
           - Effect: Allow
             Action:
               - ses:*
             Resource: arn:aws:ses:us-east-1:*:identity/*
           - Effect: Allow
             Action:
               - cloudsearch:*
             Resource: 	arn:aws:cloudsearch:us-east-1:*:*
           - Effect: Allow
             Action:
               - s3:*
             Resource: "*"
           - Effect: Allow
             Action:
               - firehose:*
             Resource: "*"
           - Effect: Allow
             Action:
               - sns:*
             Resource: "*"
        Roles:
          - Ref: IamRoleLambdaExecution
