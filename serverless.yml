service: sixcrm
package:
  excludeDevDependencies: true
  exclude:
    - .git/**
    - bin/**
    - coverage/**
    - deployment/**
    - test/**
    - tools/**
  include:
    - serverless.yml

provider:
  name: aws
  vpc:
    securityGroupIds:
      - sg-fccb87b5
    subnetIds:
      - subnet-feca2da2
      - subnet-a09161c7
      - subnet-439d7c6d
  runtime: nodejs8.10
  timeout: 90
  stage: ${opt:stage, 'development'}
  region: ${file(./config/${opt:stage}/site.yml):aws.region}
  account: ${file(./config/${opt:stage}/site.yml):aws.account}
  role: arn:aws:iam::${self:provider.account}:role/sixcrm_lambda_role
  tracing: true
  environment:
    stage: ${opt:stage, self:provider.stage}
    #Technical Debt:  Are these necessary here?
    aws_region: ${opt:region, self:provider.region}
    aws_account: ${self:provider.account}
    SIX_VERBOSE: ${file(./config/${opt:stage}/site.yml):serverless.verbose}
    cloudsearch_domainendpoint: ${file(./config/controllers/configuration_acquisition.js):getCloudsearchSearchEndpoint}
    aurora_host: ${file(./config/controllers/configuration_acquisition.js):getAuroraClusterEndpoint}
    elasticsearch_endpoint: ${file(./config/controllers/configuration_acquisition.js):getElasticSearchEndpoint}
    #redshift.host: ${file(./config/controllers/configuration_acquisition.js):getRedshiftClusterEndpoint}

plugins:
  - serverless-dynamodb-local
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 3


functions:

########################
# Authorizers qualify requests passing through API Gateway
########################

  verifysignature:
    handler: handlers/handlers.authorizers.verifysignature

  verifytransactionjwt:
    handler: handlers/handlers.authorizers.verifytransactionjwt
    environment:
      #Technical Debt:  These don't need to be defined here.
      transaction_jwt_secret_key: ${file(./config/${opt:stage}/site.yml):jwt.transaction.secret_key}
      transaction_jwt_expiration: ${file(./config/${opt:stage}/site.yml):jwt.transaction.expiration}
      jwt_issuer: ${file(./config/${opt:stage}/site.yml):jwt.issuer}

  verifysitejwt:
    handler: handlers/handlers.authorizers.verifysitejwt
    environment:
      #Technical Debt:  These don't need to be defined here.
      site_jwt_secret_key: ${file(./config/${opt:stage}/site.yml):jwt.site.secret_key}
      site_jwt_expiration: ${file(./config/${opt:stage}/site.yml):jwt.site.expiration}
      jwt_issuer: ${file(./config/${opt:stage}/site.yml):jwt.issuer}

########################
# Graph Endpoint
########################

  graph:
    handler: handlers/handlers.endpoints.graph
    events:
      - http:
          path: graph/{account}
          method: post
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: verifysitejwt
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
    environment:
      #Technical Debt:  These don't need to be defined here.
      usecache: ${file(./config/${opt:stage}/site.yml):cache.usecache}
      cachebuster: ${file(./config/${opt:stage}/site.yml):cache.cachebuster}


########################
# State Machine Lambdas (ForwardMessage Relays)
########################

  billtohold:
    handler: handlers/handlers.workers.forwardMessage.billtohold
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

  recovertohold:
    handler: handlers/handlers.workers.forwardMessage.recovertohold
    events:
      - schedule:
          rate: cron(0 1 ? * FRI *)
          enabled: true

  holdtopending:
    handler: handlers/handlers.workers.forwardMessage.holdtopending
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

  pendingtoshipped:
    handler: handlers/handlers.workers.forwardMessage.pendingtoshipped
    events:
      - schedule:
          rate: rate(6 hours)
          enabled: true

  shippedtodelivered:
    handler: handlers/handlers.workers.forwardMessage.shippedtodelivered
    events:
      - schedule:
          rate: rate(6 hours)
          enabled: true

  deliveredtoarchive:
    handler: handlers/handlers.workers.forwardMessage.deliveredtoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      archivefilter: 'all'

  holdtoarchive:
    handler: handlers/handlers.workers.forwardMessage.holdtoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      archivefilter: 'noship'

  rebilltoarchive:
    handler: handlers/handlers.workers.forwardMessage.rebilltoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      archivefilter: 'all'

  recovertoarchive:
    handler: handlers/handlers.workers.forwardMessage.recovertoarchive
    events:
      - schedule:
          rate: rate(6 hours)
          enabled: true
    environment:
      archivefilter: 'twoattempts'

  indextoarchive:
    handler: handlers/handlers.workers.forwardMessage.indextoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      archivefilter: 'all'

  #Technical Debt:  Is this deprecated?
  sendnotificationstoarchive:
    handler: handlers/handlers.workers.forwardMessage.sendnotificationstoarchive
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: false
    environment:
      archivefilter: 'all'

  pickrebillstobill:
    handler: handlers/handlers.workers.forwardMessage.pickrebillstobill
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true

########################
# SNS Workers
########################
  customeremail:
    handler: handlers/handlers.workers.sns.customeremail

  analyticsevents:
    handler: handlers/handlers.workers.sns.analyticsevents

  trackingevents:
    handler: handlers/handlers.workers.sns.trackingevents

  notificationevents:
    handler: handlers/handlers.workers.sns.notificationevents

#  eventhooks:
#    handler: handlers/workers/eventhooks/handler.eventhooks

  analyticseventhandler:
    handler: handlers/handlers.workers.analyticseventhandler
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

  reindex:
    handler: handlers/handlers.workers.reindex
    events:
      - schedule:
          rate: rate(60 minutes)
          enabled: true

  #sesnotifications:
  #  handler: handlers/workers/sesnotifications/handler.sesnotifications
  #  events:
  #    - sns:
  #        topicName: SESNotifications
  #        displayName: SES Notifications


########################
# Transaction Endpoints  (initial customer entrypoint)
########################

  acquiretoken:
    handler: handlers/handlers.endpoints.acquiretoken
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: token/acquire/{account}
         method: post
         cors: true
         authorizer:
            name: verifysignature
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
    environment:
      #Technical Debt:  These don't need to be defined here.
      jwt_issuer: ${file(./config/${opt:stage}/site.yml):jwt.issuer}
      transaction_jwt_expiration: ${file(./config/${opt:stage}/site.yml):jwt.transaction.expiration}
      transaction_jwt_secret_key: ${file(./config/${opt:stage}/site.yml):jwt.transaction.secret_key}

  createlead:
    handler: handlers/handlers.endpoints.createlead
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: lead/create/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  createorder:
    handler: handlers/handlers.endpoints.createorder
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: order/create/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  confirmorder:
    handler: handlers/handlers.endpoints.confirmorder
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: order/confirm/{account}
         method: get
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  info:
    handler: handlers/handlers.endpoints.info
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: info/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  tracking:
    handler: handlers/handlers.endpoints.tracking
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: tracking/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

  checkout:
    handler: handlers/handlers.endpoints.checkout
    timeout: 29
    events:
      - http:
         #note:  Account shouldn't be necessary here...
         path: checkout/{account}
         method: post
         cors: true
         authorizer:
           name: verifytransactionjwt
           resultTtlInSeconds: 0
           identitySource: method.request.header.Authorization

########################
# Utility
########################

  logger:
    handler: handlers/handlers.logger
