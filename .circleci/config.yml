#Todo:
# Eliminate writes to S3 for the last successful build.  Use cache instead

defaults: &job-defaults
  docker:
    - image: circleci/node:8.10
      environment:
        - TZ: "/usr/share/zoneinfo/America/Los_Angeles"

version: 2
jobs:
  build:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install
          command: echo //registry.npmjs.org/:_authToken=$NPM_TOKEN >> ~/.npmrc && yarn install --frozen-lockfile
      - run:
          name: compile
          command: yarn run compile
      - save_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - packages/sixcrm/node_modules
            - packages/sixcrm-product-setup/node_modules
      - persist_to_workspace:
          root: .
          paths:
            - packages/sixcrm/lib
            - packages/sixcrm-product-setup/lib
  lint:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: 'Lint'
          command: yarn run lint
  unit_tests:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: .
      - run:
          name: 'Legacy Unit Tests (JavaScript)'
          command: stage=circle yarn run test-unit-circle
      - run:
          name: 'Legacy Unit Tests (TypeScript)'
          command: stage=circle yarn run ts-test
  pre_deploy:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: debugging
          command: printenv
      - run:
          name: Set Access Credentials
          command: mkdir -p deployment_credentials/
      - run:
          name: Create Credentials
          command: cd packages/sixcrm && SIX_VERBOSE=2 && node ./deployment/sts/create_role_commands.js --branch=$CIRCLE_BRANCH --output=../../deployment_credentials/stscredentials
      - persist_to_workspace:
          root: .
          paths:
            - deployment_credentials
      - run:
          name: set credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Debugging 2
          command: printenv
  backup_datastore:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: .
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Backup DynamoDB
          command: cd packages/sixcrm && export SIX_VERBOSE=2 && printenv && node ./deployment/dynamodb/backup_tables.js --branch=$CIRCLE_BRANCH --version=$CIRCLE_SHA1
  deploy_serverless:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: .
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Serverless Deploy
          command: cd packages/sixcrm && SLS_DEBUG=* npx serverless deploy --stage $CIRCLE_BRANCH
      - run:
          name: Deploy Step Function State Machines
          command: cd packages/sixcrm && export SIX_VERBOSE=2 && node ./deployment/stepfunctions/deploy_state_machines.js
      - run:
          name: Cloudwatch Log Subscriptions
          command: cd packages/sixcrm && export SIX_VERBOSE=2 && node ./deployment/cloudwatch/deploy_subscription_filters.js
  deploy_aurora:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: .
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy Subnet Groups
          command: cd packages/sixcrm && SIX_VERBOSE=2 node ./deployment/aurora/deploy-subnetgroups.js
      - run:
          name: Aurora Create Cluster
          command: cd packages/sixcrm && SIX_VERBOSE=2 node ./deployment/aurora/deploy-cluster.js
      - run:
          name: Set Proxy
          command: |
            cd packages/sixcrm && SIX_VERBOSE=2 node ./deployment/aurora/resolve-cluster.js
      - run:
          name: Setup SSH Tunnel
          command: |
            cd packages/sixcrm
            source ./aurora-env
            echo "Host *" >> ~/.ssh/config
            echo "   AddressFamily inet" >> ~/.ssh/config
            chmod 600 ./config/$CIRCLE_BRANCH/ssh-keys/six-crm/sixcrm.pem
            ssh -i ./config/$CIRCLE_BRANCH/ssh-keys/six-crm/sixcrm.pem -o StrictHostKeyChecking=no -f -N -L5440:$AURORA_HOST:5440 ec2-user@$PROXY_HOST
      - run:
          name: Aurora Create Tables
          command: cd packages/sixcrm && SIX_VERBOSE=2 AURORA_PROXY=true  node ./deployment/aurora/deploy-schema.js
  #Eh... not very useful currently
  environment_test:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Entity Integration Tests
          command: SIX_VERBOSE=2 yarn run test-environment
  seed:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: .
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Entity Seed
          command: cd packages/sixcrm && SIX_VERBOSE=2 node ./deployment/dynamodb/deploy_seeds.js
      - run:
          name: Entity Live Seed
          command: cd packages/sixcrm && SIX_VERBOSE=2 node ./deployment/dynamodb/deploy_live_seeds.js
  deleteblock_integration_tests:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Deleteblock Integration Tests
          command: yarn run test-deleteblocks
  entity_integration_tests:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Entity Integration Tests
          command: yarn run test-entities
  analytics_integration_tests:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Analytics Integration Tests
          command: SIX_VERBOSE=2 yarn run test-integration-analytics
  transactional_integration_tests:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Transactional Integration Tests
          command: SIX_VERBOSE=6 yarn run test-transactions
  product_setup_tests:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: v2-dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Start Aurora Docker Image
          command: |
            set -x
            cd packages/sixcrm && docker-compose --file tools/docker/docker-compose-productsetup.yml up -d
      - run:
          name: debug1
          command: cd packages/sixcrm-product-setup && docker-compose --file ../sixcrm/tools/docker/docker-compose-productsetup.yml run -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project/packages/sixcrm-product-setup:/sixcrmserverless -w /sixcrmserverless node ls -la
      - run:
          name: debug2
          command: cd packages/sixcrm-product-setup && docker-compose --file ../sixcrm/tools/docker/docker-compose-productsetup.yml run -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project/packages/sixcrm-product-setup:/sixcrmserverless -w /sixcrmserverless node pwd
      - run:
          name: yarn install
          command: cd packages/sixcrm-product-setup && docker-compose --file ../sixcrm/tools/docker/docker-compose-productsetup.yml run -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project/packages/sixcrm-product-setup:/sixcrmserverless -w /sixcrmserverless node yarn install
      - run:
          name: yarn compile
          command: cd packages/sixcrm-product-setup && docker-compose --file ../sixcrm/tools/docker/docker-compose-productsetup.yml run -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project/packages/sixcrm-product-setup:/sixcrmserverless -w /sixcrmserverless node yarn compile
      - run:
          name: Product Setup Tests
          command: cd packages/sixcrm-product-setup && docker-compose --file ../sixcrm/tools/docker/docker-compose-productsetup.yml run -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project/packages/sixcrm-product-setup:/sixcrmserverless -w /sixcrmserverless node yarn run test

workflows:
  version: 2
  build_deploy_test:
    jobs:
      - build
      - lint:
          requires:
            - build
          filters:
            branches:
              ignore:
                - staging
                - production
                - priority
      - unit_tests:
          requires:
            - build
          filters:
            branches:
              ignore:
                - staging
                - production
                - priority
      - pre_deploy:
          requires:
            - build
            - unit_tests
            - lint
          filters:
            branches:
              only:
                - development
                - staging
                - production
                - priority
      - backup_datastore:
          requires:
            - pre_deploy
          filters:
            branches:
              only:
                - staging
                - production
                - priority
      - deploy_aurora:
          requires:
            - pre_deploy
            - backup_datastore
          filters:
            branches:
              only:
                - development
                - staging
                - production
                - priority
      - deploy_serverless:
          requires:
            - deploy_aurora
          filters:
            branches:
              only:
                - development
                - staging
                - production
                - priority
      - environment_test:
          requires:
            - deploy_serverless
          filters:
            branches:
              only:
                - development
                - staging
                - production
                - priority
      - seed:
          requires:
            - environment_test
          filters:
            branches:
              only:
                - development
                - staging
                - production
                - priority
      - entity_integration_tests:
          requires:
            - seed
          filters:
            branches:
              only:
                - development
                - staging
                - production
                - priority
      - deleteblock_integration_tests:
          requires:
            - seed
          filters:
            branches:
              only:
                - development
                - staging
                - production
                - priority
      - analytics_integration_tests:
          requires:
            - seed
          filters:
            branches:
              only:
                - development
                - staging
                - production
                - priority
      - transactional_integration_tests:
          requires:
            - seed
          filters:
            branches:
              only:
                - development
                - staging
                - production
                - priority
      - product_setup_tests:
          requires:
            - build
          filters:
            branches:
              ignore:
                - staging
                - production
                - priority
