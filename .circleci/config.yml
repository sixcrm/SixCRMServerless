#Todo:
# Eliminate writes to S3 for the last successful build.  Use cache instead

functional_tests_default: &functional-tests-default
  machine: true

defaults: &job-defaults
  docker:
    - image: circleci/node:8.10
      environment:
        - TZ: "/usr/share/zoneinfo/America/Los_Angeles"

version: 2
jobs:
  build:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
  lint:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: 'Lint'
          command: npm run lint
  unit_tests:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: 'Unit Tests'
          command: stage=circle  npm run test-unit-circle || echo "Tests failed"
  functional_tests:
    <<: *functional-tests-default
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Start Docker Cluster
          command: |
            set -x
            docker-compose --file tools/docker/docker-compose.yml up -d
      - run: echo "Pausing to allow Docker to catch up..." && sleep 15
      - run:
          name: Execute Functional Connectivity Test
          command: docker-compose --file tools/docker/docker-compose.yml run -e stage=circle -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project:/sixcrmserverless node npm run test-functional-connectivity --prefix=/sixcrmserverless
      - run:
          name: Execute Functional Redis-Provider Test
          command: docker-compose --file tools/docker/docker-compose.yml run -e stage=circle -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project:/sixcrmserverless node npm run test-functional-redis-provider --prefix=/sixcrmserverless
      - run:
          name: Deploy Local Dynamo
          command: docker-compose --file tools/docker/docker-compose.yml run -e stage=circle -e SIX_VERBOSE=2 -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project:/sixcrmserverless node node /sixcrmserverless/deployment/dynamodb/deploy_tables.js --prefix=/sixcrmserverless
      - run:
          name: Deploy Local SQS
          command: docker-compose --file tools/docker/docker-compose.yml run -e stage=circle -e SIX_VERBOSE=2 -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project:/sixcrmserverless node node /sixcrmserverless/deployment/sqs/deploy_queues.js --prefix=/sixcrmserverless
      - run:
          name: Execute State Machine Tests In Docker
          command: docker-compose --file tools/docker/docker-compose.yml run -e stage=circle -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project:/sixcrmserverless node npm run test-functional-state-machine-docker --prefix=/sixcrmserverless
  query_tests:
      <<: *functional-tests-default
      steps:
        - checkout
        - restore_cache:
            key: dependency-cache-{{ checksum "package.json" }}
        - run:
            name: Install Docker Compose
            command: |
              curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
              chmod +x ~/docker-compose
              sudo mv ~/docker-compose /usr/local/bin/docker-compose
        - run:
            name: Start Docker Cluster
            command: |
              set -x
              docker-compose --file tools/docker/docker-compose.yml up -d
        - run: echo "Pausing to allow docker to catch up..." && sleep 15
        - run:
            name: Execute Functional Connectivity Test
            command: docker-compose --file tools/docker/docker-compose.yml run -e stage=circle -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project:/sixcrmserverless node npm run test-functional-connectivity --prefix=/sixcrmserverless
        - run:
            name: Deploy Local Dynamo
            command: docker-compose --file tools/docker/docker-compose.yml run -e stage=circle -e SIX_VERBOSE=3 -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project:/sixcrmserverless node node /sixcrmserverless/deployment/dynamodb/deploy_tables.js --prefix=/sixcrmserverless
        - run:
            name: Execute Functional Analytics Query Tests in Docker
            command: docker-compose --file tools/docker/docker-compose.yml run -e stage=circle -e SIX_VERBOSE=3 -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project:/sixcrmserverless node npm run test-functional-analytics-queries --prefix=/sixcrmserverless
        - run:
            name: Execute Functional Analytics Event Tests in Docker
            command: docker-compose --file tools/docker/docker-compose.yml run -e stage=circle -e SIX_VERBOSE=3 -e AWS_ACCESS_KEY_ID=X -e AWS_SECRET_ACCESS_KEY=X -v /home/circleci/project:/sixcrmserverless node npm run test-functional-analytics-events --prefix=/sixcrmserverless
  pre_deploy:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: debugging
          command: printenv
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Access Credentials
          command: mkdir -p deployment_credentials/
      - run:
          name: Create Credentials
          command: SIX_VERBOSE=2 && node ./deployment/sts/create_role_commands.js --branch=$CIRCLE_BRANCH --output=deployment_credentials/stscredentials
      - save_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
          paths:
            - deployment_credentials
      - run:
          name: set credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Debugging 2
          command: printenv
  deploy_vpc:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy VPC
          command: export SIX_VERBOSE=2 && node ./deployment/ec2/deploy_vpcs.js
  deploy_subnets:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy Subnets
          command: export SIX_VERBOSE=2 && node ./deployment/ec2/deploy_subnets.js
  deploy_eips:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy Elastic IP Addresses
          command: export SIX_VERBOSE=2 && node ./deployment/ec2/deploy_eips.js
  deploy_internet_gateways:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy Internet Gateways
          command: export SIX_VERBOSE=2 && node ./deployment/ec2/deploy_internet_gateways.js
  deploy_nats:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy NATs
          command: export SIX_VERBOSE=2 && node ./deployment/ec2/deploy_nats.js
  deploy_route_tables:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy Route Tables
          command: export SIX_VERBOSE=2 && node ./deployment/ec2/deploy_route_tables.js
  deploy_vpc_endpoints:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy VPC Endpoints
          command: export SIX_VERBOSE=2 && node ./deployment/ec2/deploy_endpoints.js
  deploy_ec2_servers:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy EC2 Servers
          command: export SIX_VERBOSE=2 && node ./deployment/ec2/deploy_servers.js
  backup_datastore:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Backup DynamoDB
          command: export SIX_VERBOSE=2 && printenv && node ./deployment/dynamodb/backup_tables.js --branch=$CIRCLE_BRANCH --version=$CIRCLE_SHA1
  deploy_serverless:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Serveless Deploy
          command: SLS_DEBUG=* node ./node_modules/serverless/bin/serverless deploy --stage $CIRCLE_BRANCH
  deploy_security_groups:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: EC2 Security Groups
          command: export SIX_VERBOSE=2 && node ./deployment/ec2/deploy_security_groups.js
  deploy_elasticsearch:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: ElasticSearch Deployment
          command: export SIX_VERBOSE=2 && node ./deployment/elasticsearch/deploy_domains.js
  deploy_s3:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: S3 Buckets
          command: export SIX_VERBOSE=2 && node ./deployment/s3/deploy_buckets.js || echo "No changes, skipping."
      - run:
          name: S3 Backups
          command: export SIX_VERBOSE=2 && node ./deployment/s3/deploy_backups.js || echo "No changes, skipping."
  deploy_sqs:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: SQS
          command: export SIX_VERBOSE=2 && ./tools/changesInDirectory.sh deployment/sqs && node ./deployment/sqs/deploy_queues.js || echo "No changes, skipping."
  deploy_elasticache:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Elasticache Subnets
          command: export SIX_VERBOSE=2 && node ./deployment/elasticache/deploy_subnet_groups.js
      - run:
          name: Elasticache
          command: export SIX_VERBOSE=2 && node ./deployment/elasticache/deploy_clusters.js
  deploy_iam:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: IAM Deploy Policies
          command: export SIX_VERBOSE=2 && node ./deployment/iam/deploy_policies.js
      - run:
          name: IAM Deploy Roles
          command: export SIX_VERBOSE=2 && node ./deployment/iam/destroy_roles.js && node ./deployment/iam/deploy_roles.js
  deploy_stepfunctions:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy Step Function State Machines
          command: export SIX_VERBOSE=2 && node ./deployment/stepfunctions/deploy_state_machines.js
  deploy_dynamodb:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: DynamoDB Deploy Tables
          command: export SIX_VERBOSE=2 && node ./deployment/dynamodb/deploy_tables.js
      - run:
          name: DynamoDB Autoscale Tables
          command: export SIX_VERBOSE=2 && node ./deployment/dynamodb/deploy_autoscaling.js
  # deploy_redshift:
  #   <<: *job-defaults
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         key: dependency-cache-{{ checksum "package.json" }}
  #     - restore_cache:
  #         key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
  #     - run:
  #         name: Set Credentials
  #         command: cat deployment_credentials/stscredentials >> $BASH_ENV
  #     - run:
  #         name: Redshift Create Cluster
  #         command: ./tools/changesInDirectory.sh deployment/redshift && node ./deployment/redshift/deploy_cluster.js || echo "No changes, skipping."
  #     - run:
  #         name: Redshift Create Tables
  #         command: ./tools/changesInDirectory.sh deployment/redshift && node ./deployment/redshift/deploy_tables.js && echo "Pausing to allow queries to complete..." && sleep 240 || echo "No changes, skipping."
  deploy_aurora:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy Subnet Groups
          command: SIX_VERBOSE=2 node ./deployment/aurora/deploy-subnetgroups.js
      - run:
          name: Aurora Create Cluster
          command: SIX_VERBOSE=2 node ./deployment/aurora/deploy-cluster.js
      - run:
          name: Set Proxy
          command: |
            SIX_VERBOSE=2 node ./deployment/aurora/resolve-cluster.js
      - run:
          name: Setup SSH Tunnel
          command: |
            source ./aurora-env
            echo "Host *" >> ~/.ssh/config
            echo "   AddressFamily inet" >> ~/.ssh/config
            chmod 600 ./config/$CIRCLE_BRANCH/ssh-keys/six-crm/sixcrm.pem
            ssh -i ./config/$CIRCLE_BRANCH/ssh-keys/six-crm/sixcrm.pem -o StrictHostKeyChecking=no -f -N -L5440:$AURORA_HOST:5440 ec2-user@$PROXY_HOST
      - run:
          name: Aurora Create Tables
          command: SIX_VERBOSE=2 AURORA_PROXY=true  node ./deployment/aurora/deploy-schema.js
  deploy_cloudsearch:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy Clousearch
          command: SIX_VERBOSE=2 node ./deployment/cloudsearch/deploy_domains.js
  deploy_cloudsearch_indexes:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Deploy Clousearch Indexes
          command: SIX_VERBOSE=2 node ./deployment/cloudsearch/deploy_indexes.js
  deploy_sns:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: SNS Topics
          command: export SIX_VERBOSE=2 && node ./deployment/sns/deploy_topics.js
      - run:
          name: SNS Subscriptions
          command: export SIX_VERBOSE=2 && node ./deployment/sns/deploy_subscriptions.js
  deploy_logsubscription:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Cloudwatch Log Subscriptions
          command: export SIX_VERBOSE=2 && node ./deployment/cloudwatch/deploy_subscription_filters.js
  deploy_dms:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Git LFS (Large File Storage)
          command: |
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get install -y git-lfs
            git lfs pull
      - run:
          name: Deploy DMS Tasks
          command: SIX_VERBOSE=2 node ./deployment/dms/deploy_tasks.js
      - run:
          name: Import BINs
          command: SIX_VERBOSE=2 node ./deployment/dms/import_bins.js
  post_deployment:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Save Last Commit
          command: node deployment/circle/save_last_commit.js
      # - run:
      #     name: AWS Services Available
      #     command: ./tools/changesInDirectory.sh deployment/redshift && echo "Pausing to allow queries to complete..." && sleep 240 || echo "No changes, skipping."
  #Eh... not very useful currently
  environment_test:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Entity Integration Tests
          command: SIX_VERBOSE=2 npm run test-environment
  purge:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: SQS Purge
          command: node ./deployment/sqs/purge_queues.js
#      - run:
#          name: Cloudsearch Purge
#          command: node ./deployment/cloudsearch/purge.js
      - run:
          name: Elasticache Purge
          command: node ./deployment/elasticache/purge.js
#     - run:
#         name: DynamoDB Purge
#         command: node ./deployment/dynamodb/purge_tables.js
  seed:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Entity Seed
          command: SIX_VERBOSE=2 node ./deployment/dynamodb/deploy_seeds.js
  live_seed:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Entity Live Seed
          command: SIX_VERBOSE=2 node ./deployment/dynamodb/deploy_live_seeds.js
  deleteblock_integration_tests:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Deleteblock Integration Tests
          command: npm run test-deleteblocks
  entity_integration_tests:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Entity Integration Tests
          command: npm run test-entities
  analytics_integration_tests:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Analytics Integration Tests
          command: SIX_VERBOSE=2 npm run test-integration-analytics
  transactional_integration_tests:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Transactional Integration Tests
          command: export SIX_VERBOSE=2; npm run test-transactions
  synchronize_index:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: deployment-credentials-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Credentials
          command: cat deployment_credentials/stscredentials >> $BASH_ENV
      - run:
          name: Synchronize Search Index With DynamoDB
          command: node cli/index.js syncronizeindexes --fix=true
  merge:
    <<: *job-defaults
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Merge To Upper
          command: |
            if [ "${CIRCLE_BRANCH}" == "development" ]; then
              ./deployment/utilities/merge_branches.sh development staging
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              ./deployment/utilities/merge_branches.sh staging production
            elif [ "${CIRCLE_BRANCH}" == "production" ]; then
              ./deployment/utilities/merge_branches.sh production priority
            fi

workflows:
  version: 2
  build_deploy_test_and_merge:
    jobs:
      - build:
          filters:
            branches:
              only:
                - development
                - staging
                - production
                - priority
      - lint:
          requires:
            - build
          filters:
            branches:
              only:
                - development
      - unit_tests:
          requires:
            - build
          filters:
            branches:
              only:
                - development
      - functional_tests:
          requires:
            - build
            - unit_tests
            - lint
          filters:
            branches:
              only:
                - development
      - query_tests:
          requires:
            - build
            - unit_tests
            - lint
          filters:
            branches:
              only:
                - development
      - pre_deploy:
          requires:
            - build
            - unit_tests
            - lint
      - backup_datastore:
          requires:
            - pre_deploy
          filters:
            branches:
              ignore:
                - development
      - deploy_vpc:
          requires:
            - pre_deploy
            - backup_datastore
      - deploy_security_groups:
          requires:
            - deploy_vpc
      - deploy_subnets:
          requires:
            - deploy_security_groups
      - deploy_eips:
          requires:
            - deploy_subnets
      - deploy_internet_gateways:
          requires:
            - deploy_subnets
      - deploy_nats:
          requires:
            - deploy_internet_gateways
            - deploy_eips
      - deploy_route_tables:
          requires:
            - deploy_nats
      - deploy_vpc_endpoints:
          requires:
            - deploy_route_tables
      - deploy_ec2_servers:
          requires:
            - deploy_route_tables
      - deploy_elasticsearch:
          requires:
            - deploy_route_tables
      - deploy_cloudsearch:
          requires:
            - deploy_route_tables
      - deploy_cloudsearch_indexes:
          requires:
            - deploy_cloudsearch
      - deploy_aurora:
          requires:
            - deploy_security_groups
            - deploy_route_tables
            - deploy_ec2_servers
      - deploy_elasticache:
          requires:
            - deploy_route_tables
      - deploy_iam:
          requires:
            - deploy_elasticache
            - deploy_aurora
            - deploy_elasticsearch
            - deploy_route_tables
            - lint
            - unit_tests
            - backup_datastore
      - deploy_s3:
          requires:
            - deploy_elasticache
            - deploy_aurora
            - deploy_elasticsearch
            - deploy_route_tables
            - lint
            - unit_tests
            - backup_datastore
      - deploy_serverless:
          requires:
            - deploy_elasticache
            - deploy_aurora
            - deploy_elasticsearch
            - deploy_cloudsearch
            - deploy_route_tables
            - lint
            - unit_tests
            - backup_datastore
            - deploy_iam
      - deploy_stepfunctions:
          requires:
            - deploy_serverless
            - deploy_iam
      - deploy_sns:
          requires:
            - deploy_sqs
            - deploy_serverless
            - deploy_iam
      - deploy_logsubscription:
          requires:
            - deploy_serverless
            - deploy_iam
      - deploy_sqs:
          requires:
            - deploy_iam
      - deploy_dynamodb:
          requires:
            - deploy_iam
      - deploy_dms:
          requires:
            - deploy_ec2_servers
            - deploy_iam
            - deploy_s3
            - deploy_dynamodb
      # - deploy_redshift:
      #     requires:
      #       - deploy_security_groups
      #       - deploy_iam
      - post_deployment:
          requires:
            - deploy_serverless
            - deploy_s3
            - deploy_sqs
            - deploy_iam
            - deploy_dynamodb
            # - deploy_redshift
            - deploy_sns
            - deploy_stepfunctions
            - deploy_logsubscription
      - environment_test:
          requires:
            - post_deployment
      - seed:
          requires:
            - environment_test
      - live_seed:
          requires:
            - seed
          filters:
            branches:
              only:
                - production
                - priority
      - entity_integration_tests:
          requires:
            - seed
            - live_seed
      - deleteblock_integration_tests:
          requires:
            - seed
            - live_seed
      - analytics_integration_tests:
          requires:
            - seed
            - live_seed
      - transactional_integration_tests:
          requires:
            - seed
            - live_seed
      - synchronize_index:
          requires:
            - transactional_integration_tests
            - entity_integration_tests
            - deleteblock_integration_tests
            - analytics_integration_tests
      - hold:
          type: approval
          requires:
            - transactional_integration_tests
            - entity_integration_tests
            - deleteblock_integration_tests
            - analytics_integration_tests
          filters:
            branches:
              only:
                - production
                - staging
      - merge:
          requires:
            - hold
            - transactional_integration_tests
            - entity_integration_tests
            - deleteblock_integration_tests
            - analytics_integration_tests
          filters:
            branches:
              ignore:
                - priority
